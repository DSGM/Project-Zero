"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _http = require("./util/http.js");

var _http2 = _interopRequireDefault(_http);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

var _Group = require("./types/Group.js");

var _Group2 = _interopRequireDefault(_Group);

var _Appointment = require("./types/Appointment.js");

var _Appointment2 = _interopRequireDefault(_Appointment);

var _Person = require("./types/Person.js");

var _Person2 = _interopRequireDefault(_Person);

var _Grade = require("./types/Grade.js");

var _Grade2 = _interopRequireDefault(_Grade);

var _Absention = require("./types/Absention.js");

var _Absention2 = _interopRequireDefault(_Absention);

var _Message = require("./chainables/Message");

var _Message2 = _interopRequireDefault(_Message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/** A Session object for further interaction with Magister */
class Session {
  /**
   * Initializes new Session object from tokens, usually automatically done when authenticating
   * @param {String} sessionId - The current sessionId
   * @param {String} bearerToken - The current bearerToken
   * @param {String} schoolUrl - The url of the currently connected school
   */
  constructor(sessionId, bearerToken, schoolUrl) {
    this.sessionId = sessionId;
    this.bearerToken = bearerToken;
    this.schoolUrl = schoolUrl;
    this.id;
    this.current;

    this.Message = _Message2.default.bind(null, this);
  }

  initialize() {
    var _this = this;

    return _asyncToGenerator(function* () {
      yield _this.getProfileInfo();
      return _this.getCurrentSession();
    })();
  }

  /**
   * Get the current user profile info
   * @returns {Promise<Person>} - Object with user info
   */
  getProfileInfo() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const data = yield _this2.hitEndpoint("GET", `${_this2.schoolUrl}/api/account?noCache=0`);
      _this2.id = data.Persoon.Id;
      return new _Person2.default(data.Persoon);
    })();
  }

  /**
   * Updates current object containing url's
   * @returns {Promise}
   */
  getCurrentSession() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const data = yield _this3.hitEndpoint("GET", `${_this3.schoolUrl}/api/sessions/current`);
      _this3.current = data;
    })();
  }

  /**
   * Get grades in current year
   * @param {Number} amount - Amount of grades
   * @param {Number} skip - Gades to skip
   * @returns {Promise<Array>} - Array containing grades
   */
  getGrades(amount, skip) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const data = yield _this4.hitEndpoint("GET", `${_this4.schoolUrl}/api/personen/${_this4.id}/cijfers/laatste?top=${amount}&skip=${skip}}`);
      const grades = [];
      for (let i = 0; i < data.items.length; i++) {
        grades.push(new _Grade2.default(data.items[i]));
      }

      return grades;
    })();
  }

  /**
  * Get absentions from a date to aa date
  * @param {Number} from - Starting date
  * @param {Number} to - Ending date
  * @returns {Promise<Array>} - Array containing absentions
  */
  getAbsentions(from, to) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      const data = yield _this5.hitEndpoint("GET", `${_this5.schoolUrl}/api/personen/${_this5.id}/absenties?tot=${(0, _moment2.default)(to).format("YYYY-MM-DD")}&van=${(0, _moment2.default)(from).format("YYYY-MM-DD")}`);
      const absentions = [];
      for (let i = 0; i < data.Items.length; i++) {
        absentions.push(new _Absention2.default(data.Items[i]));
      }

      return absentions;
    })();
  }

  /**
   * Get all appointments from a date to a date
   * @param {Date} from - Starting date
   * @param {Date} to - Ending date
   * @returns {Promise<Array>} - Array containing appointments
   */
  getAppointments(from, to) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      const data = yield _this6.hitEndpoint("GET", `${_this6.schoolUrl}/api/personen/${_this6.id}/afspraken?status=1&tot=${(0, _moment2.default)(to).format("YYYY-MM-DD")}&van=${(0, _moment2.default)(from).format("YYYY-MM-DD")}`);
      const appointments = [];
      for (let i = 0; i < data.Items.length; i++) {
        appointments.push(new _Appointment2.default(data.Items[i]));
      }

      return appointments;
    })();
  }

  /**
   * Get all groups (classes) a user has ever been in
   * @returns {Promise<Array<Group>>} - Array containing group objects
   */
  getGroups() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      const data = yield _this7.hitEndpoint("GET", `${_this7.schoolUrl}/api/personen/${_this7.id}/aanmeldingen?geenToekomstige=false`);
      const groups = [];
      for (let i = 0; i < data.Items.length; i++) {
        groups.push(new _Group2.default(data.Items[i]));
      }

      return groups;
    })();
  }

  /**
   * Returns session data that can be used to reauthenticate later
   * @returns {String}
   */

  saveAuth() {
    const data = {
      sessionId: this.sessionId,
      bearerToken: this.bearerToken,
      schoolUrl: this.schoolUrl
    };

    return JSON.stringify(data);
  }

  /**
   * @param {String} method - HTTP request method, choose from: get, post, delete, put
   * @param {String} endpointUrl - The url of the endpoint to hit
   * @param {Object} options - Additional options to pass to Axios
   * @returns {Promise<Object>} - Promise with body data
   */
  hitEndpoint(method = "GET", endpointUrl, options = {}) {
    if (options.headers) {
      options.headers["Authorization"] = "Bearer " + this.bearerToken;
    } else {
      options.headers = {
        Authorization: "Bearer " + this.bearerToken
      };
    }
    return _http2.default[method.toLowerCase()](endpointUrl, options).then(response => response.data);
  }
}

exports.default = Session;